// === START OF COMPLETE xocoflow_logic.js ===
// Version: 1.7 - Final Consolidated Version
// Includes: Core, Base Nodes, Custom Nodes, CodeMirror Editor Integration (Text, JS, Static),
//           Project Mgmt, History, Tabs, Status Bar, Button Visibility, Keyboard Shortcuts,
//           Execution Logic, Propagation, Activation, Error Handling.
"use strict";

console.log("Xocoflow Script: Initializing (v1.7)...");

// --- Constants ---
const DRAWFLOW_CONTAINER_ID = "drawflow";
const MAX_HISTORY_STATES = 50;
const LOCALSTORAGE_NODES_KEY = 'xocoflowCustomNodeTypes';
const CORS_PROXY = 'https://api.allorigins.win/get?url='; // Replace if needed

// --- Application State ---
let editor;
let currentProjectName = 'proyecto_sin_titulo';
let selectedNodeId = null;
let historyStack = [];
let historyIndex = -1;
let customNodeTypes = {};
let copiedNodeData = null;
let nodeIntervals = {};

// --- CodeMirror State ---
let codeMirrorEditor = null;
let currentlyEditingNodeId = null;
let codeMirrorContainer = null;

// --- DOM Element Cache ---
const drawflowElement = document.getElementById(DRAWFLOW_CONTAINER_ID);
// Control Buttons
const undoButton = document.getElementById('undo-button');
const redoButton = document.getElementById('redo-button');
const duplicateButton = document.getElementById('duplicate-button');
const copyButton = document.getElementById('copy-button');
const pasteButton = document.getElementById('paste-button');
const recalculateButton = document.getElementById('recalculate-button');
const lockButton = document.getElementById('lock-button');
const unlockButton = document.getElementById('unlock-button');
// Status Bar
const statusBar = document.getElementById('editor-status-bar');
const zoomLevelSpan = document.getElementById('zoom-level');
const nodePositionSpan = document.getElementById('node-position');
// Other UI
const searchInput = document.getElementById('node-search');
const nodesListContainer = document.querySelector('.nodes-list');
const fileInputElement = document.getElementById('file-input');
const moduleListElement = document.querySelector('.menu ul#module-tabs');
const nodeDefinitionModal = document.getElementById('nodeDefinitionModal');
const modalBackdrop = document.getElementById('modalBackdrop');
// CodeMirror Sidebar
const codeEditorSidebar = document.getElementById('code-editor-sidebar');
const codeMirrorElement = document.getElementById('codemirror-container');
const codeEditorSaveButton = document.getElementById('save-code-sidebar-btn');
const codeEditorCloseButton = document.getElementById('close-code-sidebar-btn');
const editingNodeIdSpan = document.getElementById('editing-node-id');
const codeEditorTitleSpan = document.getElementById('code-editor-title'); // Assuming span exists for title

// --- Critical Initial Checks ---
function checkElement(id, isCritical = false, message = `Element #${id} not found.`) {
    const el = document.getElementById(id) || document.querySelector(id); // Allow selector
    if (!el) {
        const level = isCritical ? 'error' : 'warn';
        console[level](message);
        if (isCritical) {
            alert(`CRITICAL ERROR: ${message} App cannot start.`);
            throw new Error(message);
        }
    }
    return el;
}
checkElement(DRAWFLOW_CONTAINER_ID, true);
checkElement('.menu ul#module-tabs', true, 'Module tab container (ul#module-tabs) not found.');
checkElement('.nodes-list', true);
checkElement('#lock-button'); // Use button IDs
checkElement('#unlock-button');
checkElement('#editor-status-bar');
checkElement('#zoom-level');
checkElement('#node-position');
checkElement('#nodeDefinitionModal');
checkElement('#modalBackdrop');
checkElement('#code-editor-sidebar');
checkElement('#codemirror-container');
checkElement('#save-code-sidebar-btn');
checkElement('#close-code-sidebar-btn');
checkElement('#editing-node-id');
checkElement('#code-editor-title', false, 'Code editor title span not found.'); // Check for title span

// Library checks
if (typeof Drawflow === 'undefined') { console.error("Drawflow library not loaded."); alert("CRITICAL ERROR: Drawflow library not found."); throw new Error("Drawflow library not found."); }
if (typeof CodeMirror === 'undefined') { console.error("CodeMirror library not loaded. Advanced editing disabled."); }
if (typeof Swal === 'undefined') { console.warn("SweetAlert2 library not loaded. Using basic alerts/logs."); }

// --- Initialize Drawflow ---
try {
    editor = new Drawflow(drawflowElement);
    editor.reroute = true;
    editor.editor_mode = 'edit';
    editor.zoom_max = 1.8; // Slightly more zoom
    editor.zoom_min = 0.25; // Slightly more zoom out
    editor.zoom_value = 0.08; // Finer zoom steps
    console.log("Drawflow instance created and configured.");
} catch (e) {
    console.error("Fatal error initializing Drawflow:", e);
    alert("Fatal error initializing the flow editor. Check console.");
    throw e;
}

// --- Base Node Definitions ---
const baseNodeDefinitions = {
    'texto': { name: 'texto', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-paragraph"></i> Texto</div><div class="box"><label>Contenido:</label><textarea df-content readonly style="height: 80px;" placeholder="..."></textarea><button type="button" class="edit-code-btn" onclick="openEditorForNode(event)"><i class="fas fa-edit"></i> Editar Contenido</button><p class="help-text">Edita en panel lateral.</p></div></div>`, cssClass: 'text-node', data: { content: '' } },
    'concatenar': { name: 'concatenar', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-link"></i> Concatenar</div><div class="box" style="text-align: center; font-size: 11px; color: #777; padding: 20px 5px;">Concatena entradas<br>(orden Y)<input type="hidden" df-result></div></div>`, cssClass: 'concatenate-node', data: { result: '' } },
    'mostrarPasar': { name: 'mostrarPasar', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-eye"></i> Mostrar y Pasar</div><div class="box"><label>Resultado:</label><textarea df-result readonly style="height: 60px; background-color: #f0f0f0; width:100%; box-sizing: border-box;"></textarea><button type="button" onclick="selectAllText(event)" style="margin-top: 5px;">Seleccionar Todo</button><p class="help-text">Muestra y pasa datos.</p></div></div>`, cssClass: 'display-node', data: { result: '' } },
    'nota': { name: 'nota', inputs: 0, outputs: 0, html: `<div> <div class="title-box"><i class="fas fa-sticky-note"></i> Nota</div> <div class="box"> <div class="color-picker"> <label for="note-color-select-${'id' + Math.random().toString(16).slice(2)}">Color:</label> <select id="note-color-select-${'id' + Math.random().toString(16).slice(2)}" df-notecolor onchange="changeNoteColor(event)"> <option value="#ffffcc">Amarillo</option> <option value="#ccffcc">Verde</option> <option value="#ffcccc">Rojo</option> <option value="#ccccff">Azul</option> <option value="#e0e0e0">Gris</option> </select> </div> <textarea df-notecontent oninput="handleNodeDataChange(event); updateCharacterCount(event)" style="height: 120px;" placeholder="Notas..."></textarea> <div class="text-info"> <span df-charcount>0</span> chars </div> </div> </div>`, cssClass: 'note-node', data: { notecontent: '', notecolor: '#ffffcc', charcount: '0' } },
    'imagen': { name: 'imagen', inputs: 0, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-image"></i> Imagen HTML</div><div class="box"><div style="margin-bottom: 8px;"><button type="button" onclick="selectImageFile(event)">Seleccionar Local</button><span df-filename></span></div><img df-previewsrc src="" alt="Previa" style="display: none;"><label>URL:</label><input type="text" df-imgsrc oninput="handleImageInputChange(event)"><label>Alt:</label><input type="text" df-imgalt oninput="handleImageInputChange(event)"><label>Ancho:</label><input type="text" df-imgwidth oninput="handleImageInputChange(event)" placeholder="100px"><label>Alto:</label><input type="text" df-imgheight oninput="handleImageInputChange(event)"><p class="help-text">Salida: <img></p><input type="hidden" df-outputhtml></div></div>`, cssClass: 'image-node', data: { filename: '', previewsrc: '', imgsrc: '', imgalt: '', imgwidth: '', imgheight: '', outputhtml: '' } },
    'cargarTexto': { name: 'cargarTexto', inputs: 0, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-file-upload"></i> Cargar Texto</div><div class="box"><button type="button" onclick="selectTextFile(event)">Sel. Archivo</button><span df-filename></span><p class="help-text">Carga txt, html, ...</p><textarea df-filecontent style="display: none;"></textarea></div></div>`, cssClass: 'load-text-node', data: { filename: '', filecontent: '' } },
    'guardarTexto': { name: 'guardarTexto', inputs: 1, outputs: 0, html: `<div><div class="title-box"><i class="fas fa-save"></i> Guardar Texto</div><div class="box"><label>Nombre:</label><input type="text" df-savename oninput="handleNodeDataChange(event)" value="output.txt"><label>Contenido:</label><textarea df-savecontent readonly style="height: 60px;"></textarea><button type="button" onclick="saveNodeContentToFile(event)"><i class="fas fa-download"></i> Guardar</button></div></div>`, cssClass: 'save-text-node', data: { savename: 'output.txt', savecontent: '' } },
    'url_input': { name: 'url_input', inputs: 0, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-link"></i> URL Input</div><div class="box"><label>URL:</label><input df-url type="url" oninput="handleNodeDataChange(event)" placeholder="https://"></div></div>`, cssClass: 'url-input-node', data: { url: '' } },
    'timer_fetch': { name: 'timer_fetch', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-cloud-download-alt"></i> Timer Fetch</div><div class="box"><label>URL:</label><input df-url type="url" oninput="handleNodeDataChange(event)" placeholder="URL..."><label>Intervalo(ms):</label><input df-interval type="number" value="60000" min="100" oninput="handleNodeDataChange(event)"><p class="help-text">Fetch cada intervalo. Input 1=URL.</p></div></div>`, cssClass: 'timer-fetch-node', data: { interval: 60000, url: '' } },
    'fetch_html': { name: 'fetch_html', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-bolt"></i> Fetch HTML</div><div class="box help-text" style="padding: 15px 5px;">Recibe URL (Input 1), dispara fetch. Salida: HTML.</div></div>`, cssClass: 'fetch-node', data: {} },
    'display_text': { name: 'display_text', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-file-alt"></i> Display Text</div><div class="box"><label>Recibido:</label><textarea df-display readonly style="height:100px;"></textarea></div></div>`, cssClass: 'display-text-node', data: { display: 'Esperando...' } },
    'loop': { name: 'loop', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-sync-alt"></i> Loop</div><div class="box"><label>Intervalo(ms):</label><input df-interval type="number" value="1000" min="50" oninput="handleNodeDataChange(event)"></div></div>`, cssClass: 'loop-node', data: { interval: 1000 } },
    'repeat': { name: 'repeat', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-redo-alt"></i> Repeat</div><div class="box"><label>Veces:</label><input df-count type="number" value="3" min="1" oninput="handleNodeDataChange(event)"></div></div>`, cssClass: 'repeat-node', data: { count: 3 } },
    'timer_download': { name: 'timer_download', inputs: 0, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-stopwatch"></i> Timer Trigger</div><div class="box"><label>Intervalo(ms):</label><input df-interval type="number" value="10000" min="100" oninput="handleNodeDataChange(event)"><p class="help-text">Dispara timestamp.</p></div></div>`, cssClass: 'timer-node', data: { interval: 10000 } },
    'download_file': { name: 'download_file', inputs: 1, outputs: 0, html: `<div><div class="title-box"><i class="fas fa-download"></i> Download File</div><div class="box"><label>Nombre:</label><input df-filename type="text" value="download.txt" oninput="handleNodeDataChange(event)"><p class="help-text">Descarga Input 1.</p><input type="hidden" df-contentfordownload></div></div>`, cssClass: 'download-node', data: { filename: 'download.txt', contentfordownload: '' } },
    'extract_value': { name: 'extract_value', inputs: 2, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-filter"></i> Extraer Valor</div><div class="box"><label class="help-text">Regex (Input 2):</label><input type="text" df-selector_received readonly placeholder="(Patrón)"><label>Resultado (de Input 1):</label><textarea df-result readonly style="height:60px;">(Texto)</textarea></div></div>`, cssClass: 'extract-value-node', data: { selector_received: '', result: '(Esperando)' } },
    'javascript_code': { name: 'javascript_code', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fab fa-js-square"></i> Código JS</div><div class="box"><label>Código:</label><textarea df-jscode readonly style="height: 100px;" placeholder="// ..."></textarea><button type="button" class="edit-code-btn" onclick="openEditorForNode(event)"><i class="fas fa-edit"></i> Editar</button><div class="node-buttons"><button type="button" onclick="executeJsNode(event)"><i class="fas fa-play"></i> Ejecutar</button><button type="button" onclick="resetJsNodeResult(event)"><i class="fas fa-redo"></i> Reset</button></div><label>Resultado:</label><textarea df-result readonly style="height: 60px;"></textarea></div></div>`, cssClass: 'javascript-code-node', data: { jscode: "return input;", result: '', lastInput: null } },
    'static_code_snippet': { name: 'static_code_snippet', inputs: 1, outputs: 1, html: `<div><div class="title-box"><i class="fas fa-code"></i> Código Estático</div><div class="box"><label>Código:</label><textarea df-codecontent readonly style="height: 120px;" placeholder="<!-- ... -->"></textarea><button type="button" class="edit-code-btn" onclick="openEditorForNode(event)"><i class="fas fa-edit"></i> Editar</button><p class="help-text">Bloque estático. Edita con panel.</p></div></div>`, cssClass: 'static-code-node', data: { codecontent: '' } },
};
console.log("Base node definitions loaded:", Object.keys(baseNodeDefinitions).length);

// --- Helper Functions ---
function escapeHtml(unsafe) {
    if (unsafe === null || unsafe === undefined) return '';
    return String(unsafe)
    .replace(/&/g, '&amp;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}


    function showToast(icon, title, text = '', timer = 2000) { if (typeof Swal === 'undefined') { console.log(`Toast (${icon}): ${title} - ${text}`); return; } Swal.fire({ toast: true, position: 'bottom', icon: icon, title: title, text: text, showConfirmButton: false, timer: timer, timerProgressBar: true, didOpen: (toast) => { toast.addEventListener('mouseenter', Swal.stopTimer); toast.addEventListener('mouseleave', Swal.resumeTimer); } }); }
function getConnections(nodeId, ioType) { try { const node = editor.getNodeFromId(nodeId); const ports = ioType === 'input' ? node?.inputs : node?.outputs; if (!ports) return []; let connections = []; Object.values(ports).forEach(portInfo => { if (portInfo?.connections) { connections = connections.concat(portInfo.connections); } }); return connections; } catch (e) { console.error(`Error getConnections ${ioType} for ${nodeId}:`, e); return []; } }
function readField(nodeId, attr) { try { const node = editor.getNodeFromId(nodeId); const dataKey = attr.startsWith('df-') ? attr.substring(3) : attr; if (node?.data && dataKey in node.data) { return node.data[dataKey]; } const element = document.getElementById(`node-${nodeId}`); if (element) { const inputElement = element.querySelector(`[${attr}]`); if (inputElement) { return inputElement.value; } } } catch (e) { /* ignore */ } return null; }
function getMimeType(ext) { const m = { 'html': 'text/html;charset=utf-8','htm': 'text/html;charset=utf-8','css': 'text/css;charset=utf-8','js': 'application/javascript;charset=utf-8','json': 'application/json;charset=utf-8','xml': 'application/xml;charset=utf-8','txt': 'text/plain;charset=utf-8','csv': 'text/csv;charset=utf-8','md': 'text/markdown;charset=utf-8','jpg': 'image/jpeg','jpeg': 'image/jpeg','png': 'image/png','gif': 'image/gif','svg': 'image/svg+xml','pdf': 'application/pdf'}; return m[ext] || 'application/octet-stream'; }

// --- Node Specific UI Functions ---
function selectAllText(event) { try { const n = event.target.closest('.drawflow-node'); const t = n?.querySelector('textarea[df-result], textarea[df-display], textarea[df-savecontent]'); if (t) { t.select(); t.setSelectionRange(0, t.value.length); } } catch (e) { console.error("Error selectAllText:", e); } }
function selectImageFile(event) { try { const n = event.target.closest('.drawflow-node'); if (!n) return; const id = n.id.split('-')[1]; const i = document.createElement('input'); i.type = 'file'; i.accept = 'image/*'; i.onchange = (e) => { const f = e.target.files[0]; if (f) { const r = new FileReader(); r.onload = (le) => { editor.updateNodeDataFromId(id, { filename: f.name, previewsrc: le.target.result }); const s = n.querySelector('span[df-filename]'); if (s) s.textContent = ` ${f.name}`; const p = n.querySelector('img[df-previewsrc]'); if (p) { p.src = le.target.result; p.style.display = 'block'; } requestAnimationFrame(() => { generateImageHtml(id); }); }; r.onerror = () => showToast('error', 'Error', 'Cannot read image.'); r.readAsDataURL(f); } i.value = null; }; i.click(); } catch (e) { console.error("Error selectImageFile:", e); showToast('error', 'Error', 'Problem selecting image.'); } }
function generateImageHtml(nodeId) { try { const n = editor.getNodeFromId(nodeId); if (!n || n.name !== 'imagen') return; const d = n.data; let h = '<img'; const s = d.imgsrc || d.previewsrc; if (s) h += ` src="${escapeHtml(s)}"`; h += ` alt="${escapeHtml(d.imgalt || '')}"`; if (d.imgwidth) h += ` width="${escapeHtml(d.imgwidth)}"`; if (d.imgheight) h += ` height="${escapeHtml(d.imgheight)}"`; h += '>'; if (d.outputhtml !== h) { editor.updateNodeDataFromId(nodeId, { outputhtml: h }); propagateData(nodeId, 'imagen', 'outputhtml', h); saveHistoryState(); } } catch (e) { console.error(`Error generateImageHtml ${nodeId}:`, e); } }
function handleImageInputChange(event) { try { const n = event.target.closest('.drawflow-node'); if (!n) return; const id = n.id.split('-')[1]; requestAnimationFrame(() => { const node = editor.getNodeFromId(id); if (!node || node.name !== 'imagen') return; const data = node.data; if (event.target.hasAttribute('df-imgsrc')) { const p = n.querySelector('img[df-previewsrc]'); if (p) { const s = data.imgsrc || data.previewsrc || ''; p.src = s; p.style.display = s ? 'block' : 'none'; } } generateImageHtml(id); }); } catch (e) { console.error("Error handleImageInputChange:", e); } }
function selectTextFile(event) { try { const n = event.target.closest('.drawflow-node'); if (!n) return; const id = n.id.split('-')[1]; const i = document.createElement('input'); i.type = 'file'; i.accept = '.txt,.html,.css,.js,.json,.xml,text/*'; i.onchange = (e) => { const f = e.target.files[0]; if (f) { const r = new FileReader(); r.onload = (le) => { const c = le.target.result; editor.updateNodeDataFromId(id, { filename: f.name, filecontent: c }); const s = n.querySelector('span[df-filename]'); if (s) s.textContent = ` ${f.name}`; propagateData(id, 'cargarTexto', 'filecontent', c); saveHistoryState(); }; r.onerror = () => showToast('error', 'Error', 'Cannot read text file.'); r.readAsText(f); } i.value = null; }; i.click(); } catch (e) { console.error("Error selectTextFile:", e); showToast('error', 'Error', 'Problem selecting file.'); } }
function saveNodeContentToFile(event) { try { const n = event.target.closest('.drawflow-node'); if (!n) return; const id = n.id.split('-')[1]; const node = editor.getNodeFromId(id); if (!node) return; let c='', fn='d.txt', df='', fnf=''; if (node.name === 'guardarTexto') { df='savecontent'; fnf='savename'; fn=node.data[fnf]?.trim()||'output.txt'; } else if (node.name === 'download_file') { df='contentfordownload'; fnf='filename'; fn=node.data[fnf]?.trim()||'download.html'; } else return; c=node.data[df]||''; if (!c && node.name !== 'download_file') { showToast('warning', 'Empty', 'No content to save.'); return; } fn=fn.replace(/[^a-zA-Z0-9._-]/g,'_').trim()||"d.txt"; if(fn.length>200) fn=fn.substring(0,200); const mime=getMimeType(fn.split('.').pop().toLowerCase()); const b=new Blob([c],{type:mime}); const l=document.createElement('a'); l.href=URL.createObjectURL(b); l.download=fn; document.body.appendChild(l); l.click(); document.body.removeChild(l); URL.revokeObjectURL(l.href); } catch (error) { console.error("Error saveNodeContentToFile:", error); showToast('error', 'Error', 'Could not save file.'); } }
function updateCharacterCount(event) { try { const t = event.target; const n = t.closest('.drawflow-node'); if (!n || !t.hasAttribute('df-notecontent')) return; const c = t.value?.length || 0; const s = n.querySelector('[df-charcount]'); if (s) s.textContent = c; } catch (e) { console.error("Error updateCharacterCount:", e); } }
function changeNoteColor(event) { try { const s = event.target; const n = s.closest('.drawflow-node'); if (!n) return; const id = n.id.split('-')[1]; const c = s.value; editor.updateNodeDataFromId(id, { notecolor: c }); n.style.backgroundColor = c; saveHistoryState(); console.log(`Note ${id} color set to ${c}`); } catch (e) { console.error("Error changeNoteColor:", e); showToast('error', 'Error Color', 'Could not change color.'); } }
function openEditorForNode(event) { try { const btn = event.target.closest('button.edit-code-btn'); const nEl = btn?.closest('.drawflow-node'); if (!nEl) return; const id = nEl.id.split('-')[1]; const node = editor.getNodeFromId(id); const types = ['javascript_code', 'static_code_snippet', 'texto']; if (id && types.includes(node?.name)) editor.selectNode(nEl.id); } catch(e) { console.error("Error openEditorForNode:", e); } }
function executeJsNode(event) { const nEl = event.target.closest('.drawflow-node'); if (!nEl) return; const id = nEl.id.split('-')[1]; const node = editor.getNodeFromId(id); if (!node || node.name !== 'javascript_code') return; const code = node.data.jscode || ''; const input = node.data.lastInput; let res, err=false, resStr=''; const start = performance.now(); try { const func = new Function('input', `'use strict';\n${code}`); res = func(input); if (res === undefined) resStr = '(undefined)'; else if (res === null) resStr = 'null'; else if (typeof res === 'string') resStr = res; else try { resStr = JSON.stringify(res, null, 2); } catch { resStr = String(res); } const end = performance.now(); console.log(`JS Result (${(end - start).toFixed(1)}ms):`, res); } catch (e) { const end = performance.now(); console.error(`JS Error ${id} (${(end-start).toFixed(1)}ms):`, e); resStr=`Error: ${e.message}\n${e.stack?e.stack.split('\n')[1]:''}`; err=true; res=undefined; } const ta = nEl.querySelector('textarea[df-result]'); if (ta) { ta.value = resStr; ta.classList.toggle('error', err); } editor.updateNodeDataFromId(id, { result: res }); if (!err) propagateData(id, 'javascript_code', 'result', res); }
function resetJsNodeResult(event) { const nEl = event.target.closest('.drawflow-node'); if (!nEl) return; const id = nEl.id.split('-')[1]; const node = editor.getNodeFromId(id); if (!node || node.name !== 'javascript_code') return; const ta = nEl.querySelector('textarea[df-result]'); if (ta) { ta.value = ''; ta.classList.remove('error'); } editor.updateNodeDataFromId(id, { result: '' }); propagateData(id, 'javascript_code', 'result', null); }

// --- Interval Management ---
function cleanupNodeIntervals(nodeId) { if (nodeIntervals[nodeId]) { nodeIntervals[nodeId].forEach(clearInterval); delete nodeIntervals[nodeId]; } }
function cleanupAllModuleIntervals() { const keys = Object.keys(nodeIntervals); if (keys.length > 0) { console.log(`Cleaning intervals for ${keys.length} nodes...`); keys.forEach(cleanupNodeIntervals); nodeIntervals = {}; } }

// --- Execution & Propagation ---
const EXECUTE_NODE_SYSTEM_TYPES = ['url_input', 'timer_fetch', 'fetch_html', 'display_text', 'loop', 'repeat', 'timer_download', 'download_file', 'extract_value'];
async function executeNode(nodeId, payload) { let node; try { node = editor.getNodeFromId(nodeId); if (!node) { cleanupNodeIntervals(nodeId); return; } } catch (error) { console.error(`Err get node ${nodeId}:`, error); return; } const nName = node.name; let outP = payload; if (node._executing) return; node._executing = true; try { switch (nName) { case 'timer_fetch': case 'timer_download': case 'loop': { cleanupNodeIntervals(nodeId); let intMs = parseInt(readField(nodeId, 'df-interval') || node.data?.interval, 10); const defInt = nName === 'loop' ? 1000 : (nName === 'timer_fetch' ? 60000 : 10000); if (isNaN(intMs) || intMs < 100) intMs = defInt; const initP = payload; console.log(`Start ${nName} ${nodeId} every ${intMs} ms.`); const execInt = async () => { const currN = editor.getNodeFromId(nodeId); if (!currN) { cleanupNodeIntervals(nodeId); return; } if (nName === 'timer_fetch') { let url = readField(nodeId, 'df-url'); if (!url?.trim()) { const cs = getConnections(nodeId, 'input'); for (const c of cs) { const src = editor.getNodeFromId(c.node); if (src?.name === 'url_input') { url = readField(c.node, 'df-url'); if (url?.trim()) break; } } } if (url?.trim()) { url = url.trim(); if (!url.startsWith('http')) url = 'https://' + url; try { const r = await fetch(CORS_PROXY + encodeURIComponent(url)); if (!r.ok) throw new Error(`HTTP ${r.status}`); const d = await r.json(); propagateExecution(nodeId, d.contents); } catch (err) { console.error(`TFetch ${nodeId} err:`, err); propagateExecution(nodeId, `// ERR Fetch:\n// ${err.message}`); } } else propagateExecution(nodeId, '// ERR: No URL'); } else if (nName === 'loop') { propagateExecution(nodeId, initP); } else propagateExecution(nodeId, Date.now()); }; const intId = setInterval(execInt, intMs); if (!nodeIntervals[nodeId]) nodeIntervals[nodeId] = []; nodeIntervals[nodeId].push(intId); if (nName === 'timer_fetch') await execInt(); break; } case 'fetch_html': { let url = payload; if (typeof url !== 'string' || !url?.trim()){ propagateExecution(nodeId, '// ERR: Invalid URL'); return; } url = url.trim(); if (!url.startsWith('http')) url = 'https://' + url; try { const r = await fetch(CORS_PROXY + encodeURIComponent(url)); if (!r.ok) throw new Error(`HTTP ${r.status}`); const d = await r.json(); outP = d.contents; } catch (err) { console.error(`Fetch ${nodeId} err:`, err); outP = `// ERR Fetch:\n// ${err.message}`; } propagateExecution(nodeId, outP); break; } case 'display_text': { const txt = String(payload ?? '(null)'); editor.updateNodeDataFromId(nodeId, { display: txt }); const el = document.getElementById(`node-${nodeId}`); const ta = el?.querySelector('textarea[df-display]'); if (ta) ta.value = txt; outP = payload; propagateExecution(nodeId, outP); break; } case 'repeat': { let c = parseInt(readField(nodeId, 'df-count') || node.data?.count, 10); if (isNaN(c) || c <= 0) return; const p = payload; for (let i = 0; i < c; i++) setTimeout(() => propagateExecution(nodeId, p), 0); return; } case 'download_file': { if (payload === null || payload === undefined) return; const f = readField(nodeId, 'df-filename')?.trim() || 'd.txt'; const s = String(payload); editor.updateNodeDataFromId(nodeId, { contentfordownload: s, filename: f }); try { const sf = f.replace(/[^a-zA-Z0-9._-]/g, '_').trim() || "d.txt"; const m = getMimeType(sf.split('.').pop().toLowerCase()); const b = new Blob([s], { type: m }); const l = document.createElement('a'); l.href = URL.createObjectURL(b); l.download = sf; document.body.appendChild(l); l.click(); document.body.removeChild(l); URL.revokeObjectURL(l.href); } catch (err) { console.error(`Download ${nodeId} error:`, err); showToast('error', 'Error', 'Error descarga.'); } return; } case 'url_input': { const u = readField(nodeId, 'df-url'); outP = u; propagateExecution(nodeId, outP); break; } case 'extract_value': { const txt = String(payload ?? ''); const pat = readField(nodeId, 'df-selector_received') || ''; let val = null, res = '(Esperando)'; if (txt && pat) { try { const r = new RegExp(pat); const m = txt.match(r); if (m) { val = m[1] ?? m[0]; res = val; } else res = '(No encontrado)'; } catch (e) { res = '(Error Regex)'; } } else if (!pat) res = '(Esperando patrón)'; else res = '(Esperando texto)'; editor.updateNodeDataFromId(nodeId, { result: res }); const el = document.getElementById(`node-${nodeId}`); const rt = el?.querySelector('textarea[df-result]'); if (rt) rt.value = res; outP = val; propagateExecution(nodeId, outP); break; } default: { if (!baseNodeDefinitions[nName] || EXECUTE_NODE_SYSTEM_TYPES.includes(nName)) propagateExecution(nodeId, outP); } } } catch (error) { console.error(`Error executing ${nName} (${nodeId}):`, error); showToast('error', `Error ${nName}`, error.message.substring(0,50), 4000); } finally { if (node) node._executing = false; } }
function propagateExecution(sourceNodeId, payload) { const conns = getConnections(sourceNodeId, 'output'); conns.forEach(conn => { const targetId = conn.node; const targetNode = editor.getNodeFromId(targetId); if (!targetNode) return; const targetPort = conn.output; if (EXECUTE_NODE_SYSTEM_TYPES.includes(targetNode.name)) { if (targetNode.name === 'extract_value') { if (targetPort === 'input_1') setTimeout(() => executeNode(targetId, payload), 0); else if (targetPort === 'input_2') { const s = String(payload ?? ''); editor.updateNodeDataFromId(targetId, { selector_received: s }); const el = document.getElementById(`node-${targetId}`); const i = el?.querySelector('input[df-selector_received]'); if (i) i.value = s; } } else { setTimeout(() => executeNode(targetId, payload), 0); } } else if (targetNode.name === 'javascript_code') { editor.updateNodeDataFromId(targetId, { lastInput: payload }); } else if (['mostrarPasar', 'guardarTexto', 'concatenar'].includes(targetNode.name)) { const val = String(payload ?? ''); if (targetPort === 'input_1') { if (targetNode.name === 'mostrarPasar') { editor.updateNodeDataFromId(targetId, { result: val }); const el = document.getElementById(`node-${targetId}`); const ta = el?.querySelector('textarea[df-result]'); if(ta) ta.value = val; setTimeout(() => propagateData(targetId, targetNode.name, 'result', val), 0); } else if (targetNode.name === 'guardarTexto') { editor.updateNodeDataFromId(targetId, { savecontent: val }); const el = document.getElementById(`node-${targetId}`); const ta = el?.querySelector('textarea[df-savecontent]'); if(ta) ta.value = val; } else if (targetNode.name === 'concatenar') { setTimeout(() => updateConcatenateNode(targetId), 0); } } } }); }
function handleNodeDataChange(event) { if (!editor || !event?.target) return; const el = event.target; const nodeEl = el.closest('.drawflow-node'); if (!nodeEl) return; const id = nodeEl.id.split('-')[1]; const node = editor.getNodeFromId(id); if (!node) return; let key = null; for (const attr of el.attributes) if (attr.name.startsWith('df-')) { key = attr.name.substring(3); break; } if (!key) return; requestAnimationFrame(() => { try { const updatedNode = editor.getNodeFromId(id); if (!updatedNode?.data?.hasOwnProperty(key)) return; const val = updatedNode.data[key]; const name = updatedNode.name; if ((name === 'url_input' && key === 'url') || (name === 'cargarTexto' && key === 'filecontent')) { if(name === 'url_input') executeNode(id, val); else propagateData(id, name, key, val); } else if (name === 'imagen' && ['imgsrc', 'imgalt', 'imgwidth', 'imgheight'].includes(key)) handleImageInputChange(event); else if (name === 'nota' && key === 'notecontent') updateCharacterCount(event); else if ((name === 'timer_fetch' || name === 'timer_download' || name === 'loop') && key === 'interval') executeNode(id, null); else if (name === 'timer_fetch' && key === 'url') executeNode(id, null); saveHistoryState(); } catch (e) { console.error(`Error handleNodeDataChange (${id}/${key}):`, e); } }); }
function propagateData(sourceNodeId, sourceNodeName, changedKey, outputData) { const sourceNode = editor.getNodeFromId(sourceNodeId); const outputPort = sourceNode?.outputs?.output_1; if (!outputPort) return; const connections = outputPort.connections || []; connections.forEach(conn => { const targetId = conn.node; const targetNode = editor.getNodeFromId(targetId); if (!targetNode) return; const targetPort = conn.output; if (EXECUTE_NODE_SYSTEM_TYPES.includes(targetNode.name)) { if (targetNode.name === 'extract_value') { if (targetPort === 'input_1') setTimeout(() => executeNode(targetId, outputData), 0); else if (targetPort === 'input_2') { const s = String(outputData ?? ''); editor.updateNodeDataFromId(targetId, { selector_received: s }); const el = document.getElementById(`node-${targetId}`); const i = el?.querySelector('input[df-selector_received]'); if (i) i.value = s; } } else { setTimeout(() => executeNode(targetId, outputData), 0); } } else if (targetNode.name === 'javascript_code') { editor.updateNodeDataFromId(targetId, { lastInput: outputData }); } else if (targetNode.name === 'concatenar') { setTimeout(() => updateConcatenateNode(targetId), 0); } else if (targetNode.name === 'mostrarPasar') { if (targetPort === 'input_1') { const v = String(outputData ?? ''); editor.updateNodeDataFromId(targetId, { result: v }); const el = document.getElementById(`node-${targetId}`); const ta = el?.querySelector('textarea[df-result]'); if(ta) ta.value = v; setTimeout(() => propagateData(targetId, targetNode.name, 'result', outputData), 0); } } else if (targetNode.name === 'guardarTexto') { if (targetPort === 'input_1') { const v = String(outputData ?? ''); editor.updateNodeDataFromId(targetId, { savecontent: v }); const el = document.getElementById(`node-${targetId}`); const ta = el?.querySelector('textarea[df-savecontent]'); if(ta) ta.value = v; } } }); }
function updateConcatenateNode(nodeId) { const n = editor.getNodeFromId(nodeId); if (!n || n.name !== 'concatenar' || !n.inputs?.input_1) return; const conns = (n.inputs.input_1.connections || []).slice().sort((a, b) => (editor.getNodeFromId(a.node)?.pos_y ?? 0) - (editor.getNodeFromId(b.node)?.pos_y ?? 0)); let str = ""; conns.forEach(c => { const sN = editor.getNodeFromId(c.node); if (!sN?.data) return; let dC = ''; const d = sN.data; const keys = ['result', 'content', 'codecontent', 'outputhtml', 'filecontent', 'display', 'url', 'jscode']; for(const k of keys){if(d.hasOwnProperty(k)){ dC = d[k]; break; }} if (dC === '' && Object.keys(d).length > 0) { const fk = Object.keys(d)[0]; if(!['lastInput', 'selector_received'].includes(fk)) dC = d[fk]; } str += String(dC ?? ''); }); if (n.data.result !== str) { editor.updateNodeDataFromId(nodeId, { result: str }); propagateData(nodeId, 'concatenar', 'result', str); saveHistoryState(); } }

// --- Node Activation ---
function activateNodeIfNeeded(nodeId) { try { const node = editor.getNodeFromId(nodeId); if (!node) return; const nName = node.name; if (['timer_fetch', 'timer_download', 'loop'].includes(nName)) executeNode(nodeId, null); else if (nName === 'repeat' && getConnections(nodeId, 'input').length === 0) executeNode(nodeId, null); else if (nName === 'url_input') { const url = readField(nodeId, 'df-url'); if (url?.trim()) executeNode(nodeId, url); } else if (nName === 'cargarTexto') { const c = node.data?.filecontent; if(c) propagateData(nodeId, nName, 'filecontent', c); } else if (nName === 'texto') { const c = node.data?.content; if(c) propagateData(nodeId, nName, 'content', c); } else if (nName === 'static_code_snippet') { const c = node.data?.codecontent; if(c) propagateData(nodeId, nName, 'codecontent', c); } else if (nName === 'imagen') generateImageHtml(nodeId); } catch (error) { console.error(`Error activating ${nodeId}:`, error); } }
function activateExistingAutoNodes() { console.log("Activating initial/auto nodes..."); let nodes = {}; try { nodes = editor.export()?.drawflow?.[editor.module]?.data ?? {}; } catch (e) { console.error("Err get nodes for activation:", e); return; } cleanupAllModuleIntervals(); const ids = Object.keys(nodes); if (ids.length > 0) { ids.forEach(id => { activateNodeIfNeeded(id); }); ids.forEach(id => { if (nodes[id]?.name === 'concatenar') updateConcatenateNode(id); }); } console.log("Initial activation complete."); }

// --- Node Search ---
if (searchInput) searchInput.addEventListener('input', filterNodes);
function filterNodes() { if (!searchInput || !nodesListContainer) return; try { const s = searchInput.value.toLowerCase().trim(); const items = nodesListContainer.querySelectorAll('.drag-drawflow, .create-node-button'); items?.forEach(i => { const btn = i.classList.contains('create-node-button'); const type = i.dataset.node?.toLowerCase() || ''; const nameEl = i.querySelector('span'); const nameTxt = nameEl?.textContent.toLowerCase().trim() || ''; const defName = btn ? 'crear tipo nodo' : ''; const itemTxt = nameTxt || defName; const show = !s || itemTxt.includes(s) || (type && type.includes(s)) || (btn && 'crear'.includes(s)); i.style.display = show ? (btn ? 'block' : 'flex') : 'none'; }); } catch (e) { console.error("Error filterNodes:", e); } }

// --- Custom Node Management ---
function getStoredCustomNodeTypes() { try { const s = localStorage.getItem(LOCALSTORAGE_NODES_KEY); return JSON.parse(s || '{}'); } catch (e) { console.error("Err reading custom types:", e); return {}; } }
function saveCustomNodeTypes(allTypes) { try { const custom = {}; for (const k in allTypes) if (!baseNodeDefinitions.hasOwnProperty(k)) custom[k] = allTypes[k]; localStorage.setItem(LOCALSTORAGE_NODES_KEY, JSON.stringify(custom)); } catch (e) { console.error("Err saving custom types:", e); showToast('error', 'Error', 'Cannot save custom nodes.'); } }
function addDraggableItemToSidebar(nodeDef) { if (!nodesListContainer || !nodeDef?.name) return; if (nodesListContainer.querySelector(`.drag-drawflow[data-node="${nodeDef.name}"]`)) return; const div = document.createElement('div'); div.className = 'drag-drawflow'; div.style.display = 'flex'; div.draggable = true; div.dataset.node = nodeDef.name; let title = nodeDef.title || nodeDef.name; let iconHtml = '<i class="fas fa-puzzle-piece"></i>'; try { const tmp = document.createElement('div'); tmp.innerHTML = nodeDef.html || ''; const tb = tmp.querySelector('.title-box'); if (tb) { const i = tb.querySelector('i'); if (i) { const ci = i.cloneNode(true); ci.style.cssText = 'margin-right: 8px; color: #777; width: 16px; text-align: center; flex-shrink: 0;'; iconHtml = ci.outerHTML; } if (!nodeDef.title) { const txt = tb.textContent.replace(/<[^>]*>/g, '').trim(); if (txt) title = txt; } } } catch (e) { console.warn(`Err parsing sidebar HTML for ${nodeDef.name}:`, e); } div.innerHTML = `${iconHtml}<span style="flex-grow: 1; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">${escapeHtml(title)}</span>`; div.title = `Drag: ${title} (${nodeDef.name})`; if (!baseNodeDefinitions.hasOwnProperty(nodeDef.name)) { const del = document.createElement('button'); del.innerHTML = '<i class="fas fa-trash-alt"></i>'; del.className = 'delete-node-type-btn'; del.title = `Delete type: ${nodeDef.name}`; del.setAttribute('aria-label', `Delete type ${nodeDef.name}`); del.onclick = (ev) => { ev.stopPropagation(); promptDeleteNodeType(nodeDef.name); }; div.appendChild(del); } div.addEventListener('dragstart', drag); div.addEventListener('touchstart', drag, { passive: false }); div.addEventListener('touchmove', positionMobile, { passive: false }); div.addEventListener('touchend', drop); nodesListContainer.appendChild(div); }
function loadCustomNodesToSidebar() { if (!nodesListContainer) return; try { const stored = getStoredCustomNodeTypes(); customNodeTypes = { ...baseNodeDefinitions, ...stored }; console.log("Node types loaded:", Object.keys(customNodeTypes).length); nodesListContainer.innerHTML = ''; if (nodeDefinitionModal) { const btn = document.createElement('div'); btn.className = 'create-node-button'; btn.setAttribute('role', 'button'); btn.innerHTML = '<i class="fas fa-plus-circle"></i><span>&nbsp;&nbsp;Create Node Type</span>'; btn.title = 'Define new custom node type'; btn.onclick = openNodeDefinitionModal; nodesListContainer.appendChild(btn); } const defs = Object.values(customNodeTypes).sort((a, b) => (a.title || a.name).localeCompare(b.title || b.name)); defs.forEach(addDraggableItemToSidebar); filterNodes(); } catch (e) { console.error("Fatal sidebar load error:", e); showToast('error', 'Sidebar Error', 'Error loading nodes.'); } }
function openNodeDefinitionModal() { if (!nodeDefinitionModal || !modalBackdrop) { showToast('error','Error','Modal not available.'); return; } document.getElementById('newNodeTypeName').value = ''; document.getElementById('newNodeTypeTitle').value = ''; document.getElementById('newNodeInputs').value = '1'; document.getElementById('newNodeOutputs').value = '1'; document.getElementById('newNodeCssClass').value = ''; document.getElementById('newNodeHtmlContent').value = `<div>\n  <div class="title-box"><i class="fas fa-cogs"></i> My Node</div>\n  <div class="box">\n    <label>Data:</label>\n    <input type="text" df-mydata placeholder="Value...">\n  </div>\n</div>`; document.getElementById('newNodeInitialData').value = `{ "mydata": "" }`; nodeDefinitionModal.style.display = 'block'; modalBackdrop.style.display = 'block'; document.getElementById('newNodeTypeName').focus(); }
function closeNodeDefinitionModal() { if (!nodeDefinitionModal || !modalBackdrop) return; nodeDefinitionModal.style.display = 'none'; modalBackdrop.style.display = 'none'; }
function saveNewNodeType() { const nameIn=document.getElementById('newNodeTypeName'), titleIn=document.getElementById('newNodeTypeTitle'), inputsIn=document.getElementById('newNodeInputs'), outputsIn=document.getElementById('newNodeOutputs'), cssIn=document.getElementById('newNodeCssClass'), htmlIn=document.getElementById('newNodeHtmlContent'), dataIn=document.getElementById('newNodeInitialData'); if(!nameIn||!titleIn||!inputsIn||!outputsIn||!cssIn||!htmlIn||!dataIn) { showToast('error','Internal Error','Modal fields missing.'); return; } const name=nameIn.value.trim().toLowerCase().replace(/\s+/g,'_').replace(/[^a-z0-9_]/g,''); const title=titleIn.value.trim(); const inputs=parseInt(inputsIn.value,10); const outputs=parseInt(outputsIn.value,10); const cssClass=cssIn.value.trim()||`${name}-node`; const html=htmlIn.value; const dataStr=dataIn.value.trim(); if(!name) { showToast('error','Validation Error','Internal name required.'); nameIn.focus(); return; } if(customNodeTypes[name]) { showToast('error','Validation Error',`Name "${name}" exists.`); nameIn.focus(); return; } if(isNaN(inputs)||inputs<0||isNaN(outputs)||outputs<0) { showToast('error','Validation Error','Inputs/Outputs >= 0.'); return; } if(!html) { showToast('error','Validation Error','HTML empty.'); htmlIn.focus(); return; } let iData={}; if(dataStr) { try { iData=JSON.parse(dataStr); if(typeof iData!=='object'||iData===null||Array.isArray(iData)) throw new Error("JSON must be object."); } catch(e) { showToast('error','JSON Error',`Initial Data: ${e.message}`); dataIn.focus(); return; } } else { try { const tmp=document.createElement('div'); tmp.innerHTML=html; tmp.querySelectorAll('[df-]').forEach(el=>{ for(const a of el.attributes) if(a.name.startsWith('df-')){ const k=a.name.substring(3); if(!iData.hasOwnProperty(k)) iData[k]=el.value??el.textContent??''; } }); } catch(e){console.warn("Infer data error:", e);} } const def={name,title,inputs,outputs,html,data:iData,cssClass}; customNodeTypes[name]=def; saveCustomNodeTypes(customNodeTypes); addDraggableItemToSidebar(def); const item=nodesListContainer.querySelector(`[data-node="${name}"]`); item?.scrollIntoView({behavior:'smooth',block:'nearest'}); showToast('success','Success',`Type "${title||name}" added.`); closeNodeDefinitionModal(); }
function promptDeleteNodeType(nodeTypeName) { if(!nodeTypeName) return; if(baseNodeDefinitions.hasOwnProperty(nodeTypeName)){ showToast('warning','Not Allowed',`Base node "${nodeTypeName}" cannot be deleted.`); return; } if(!customNodeTypes.hasOwnProperty(nodeTypeName) || !getStoredCustomNodeTypes().hasOwnProperty(nodeTypeName)){ showToast('error','Error',`Custom node "${nodeTypeName}" not found.`); return; } const title=customNodeTypes[nodeTypeName]?.title||nodeTypeName; Swal.fire({title:`Delete Type "${title}"?`, text:`Delete definition "${nodeTypeName}"? Existing nodes may fail. Irreversible!`, icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', cancelButtonColor:'#3085d6', confirmButtonText:'Yes, delete type', cancelButtonText:'Cancel'}).then((res) => { if(res.isConfirmed){ try { delete customNodeTypes[nodeTypeName]; saveCustomNodeTypes(customNodeTypes); loadCustomNodesToSidebar(); showToast('success','Deleted',`Type "${title}" deleted.`); } catch(err){ console.error(`Err deleting ${nodeTypeName}:`,err); showToast('error','Error', 'Failed to delete.'); customNodeTypes[nodeTypeName] = getStoredCustomNodeTypes()[nodeTypeName]; } } }); }

// --- History (Undo/Redo) ---
function initializeHistory() { historyStack = []; historyIndex = -1; updateUIDisabledStates(); console.log("History initialized."); }
function saveHistoryState(force = false) { if (!editor || (editor.editor_mode === 'fixed' && !force)) return; try { const currentState = JSON.stringify(editor.export()); if (!force && historyIndex >= 0 && historyStack[historyIndex] === currentState) return; if (historyIndex < historyStack.length - 1) historyStack = historyStack.slice(0, historyIndex + 1); historyStack.push(currentState); if (historyStack.length > MAX_HISTORY_STATES) historyStack.shift(); historyIndex = historyStack.length - 1; updateUIDisabledStates(); } catch (e) { console.error("Error saveHistoryState:", e); } }
function undo() { if (historyIndex <= 0 || editor.editor_mode === 'fixed') return; try { historyIndex--; const previousState = JSON.parse(historyStack[historyIndex]); const currentModule = editor.module; cleanupAllModuleIntervals(); editor.import(previousState); if (editor.module === currentModule) { activateExistingAutoNodes(); updateUIDisabledStates(); if(currentlyEditingNodeId && !editor.getNodeFromId(currentlyEditingNodeId)) closeCodeEditorSidebar(false); else if (currentlyEditingNodeId) openCodeEditorSidebar(currentlyEditingNodeId); } else console.warn("Module changed during Undo."); } catch (e) { console.error("Error during Undo:", e); historyIndex++; updateUIDisabledStates(); showToast('error', 'Error', 'Failed to undo.'); } }
function redo() { if (historyIndex >= historyStack.length - 1 || editor.editor_mode === 'fixed') return; try { historyIndex++; const nextState = JSON.parse(historyStack[historyIndex]); const currentModule = editor.module; cleanupAllModuleIntervals(); editor.import(nextState); if (editor.module === currentModule) { activateExistingAutoNodes(); updateUIDisabledStates(); if(currentlyEditingNodeId && !editor.getNodeFromId(currentlyEditingNodeId)) closeCodeEditorSidebar(false); else if (currentlyEditingNodeId) openCodeEditorSidebar(currentlyEditingNodeId); } else console.warn("Module changed during Redo."); } catch (e) { console.error("Error during Redo:", e); historyIndex--; updateUIDisabledStates(); showToast('error', 'Error', 'Failed to redo.'); } }

// --- Project Management ---
function triggerLoad() { if (fileInputElement) fileInputElement.click(); else showToast('error', 'Error', 'File input missing.'); }
if (fileInputElement) fileInputElement.addEventListener('change', loadProjectFromFile);
function loadProjectFromFile(event) { const file = event.target?.files?.[0]; if (!file) { if(event?.target) event.target.value = null; return; } const projectName = file.name.replace(/\.json$/i, ""); const reader = new FileReader(); reader.onload = (e) => { try { const projectData = JSON.parse(e.target.result); if (!projectData?.drawflow) throw new Error("Invalid JSON: 'drawflow' missing."); if (projectData.customNodeDefinitions && typeof projectData.customNodeDefinitions === 'object') { saveCustomNodeTypes(projectData.customNodeDefinitions); customNodeTypes = { ...baseNodeDefinitions, ...projectData.customNodeDefinitions }; loadCustomNodesToSidebar(); } else { customNodeTypes = { ...baseNodeDefinitions, ...getStoredCustomNodeTypes() }; loadCustomNodesToSidebar(); } cleanupAllModuleIntervals(); editor.import(projectData); currentProjectName = projectName; renderModuleTabs(); initializeHistory(); selectedNodeId = null; copiedNodeData = null; updateUIDisabledStates(); closeCodeEditorSidebar(false); document.title = `Xocoflow | ${projectName} - ${editor.module}`; saveHistoryState(true); activateExistingAutoNodes(); showToast('success', 'Loaded', `Project "${projectName}".`); } catch (err) { console.error("Error loading project:", err); showToast('error', 'Load Error', `Error: ${err.message}`); } finally { if (event?.target) event.target.value = null; } }; reader.onerror = (e) => { showToast('error', 'Read Error', 'Could not read file.'); if(event?.target) event.target.value = null; }; reader.readAsText(file); }
function saveProject(filename) { if (!editor) return; if (!filename || typeof filename !== 'string') filename = currentProjectName || 'xocoflow_project'; filename = filename.trim().replace(/\.json$/i,""); if (!filename) filename = 'xocoflow_project'; filename += '.json'; try { const drawflowData = editor.export(); if (!drawflowData?.drawflow) throw new Error("Export failed."); const customDefs = getStoredCustomNodeTypes(); const project = { appName: "Xocoflow", version: "1.7", savedAt: new Date().toISOString(), customNodeDefinitions: customDefs, drawflow: drawflowData.drawflow }; const json = JSON.stringify(project, null, 2); const blob = new Blob([json], { type: 'application/json;charset=utf-8' }); const link = document.createElement('a'); link.href = URL.createObjectURL(blob); link.download = filename; document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(link.href); currentProjectName = filename.replace(/\.json$/i, ""); document.title = `Xocoflow | ${currentProjectName} - ${editor.module}`; showToast('success', 'Saved', `${filename}`); } catch (err) { console.error("Error saving:", err); showToast('error', 'Save Error', `Error: ${err.message}`); } }
async function promptSaveAs() { try { const { value: inputName } = await Swal.fire({ title: 'Save As...', input: 'text', inputLabel: 'Filename (no .json)', inputValue: currentProjectName || 'my_project', showCancelButton: true, confirmButtonText: 'Save', cancelButtonText: 'Cancel', inputValidator: (v) => (!v?.trim() ? 'Name required!' : (/[<>:"/\\|?*]/.test(v)?'Invalid chars.':null)) }); if (inputName) saveProject(inputName.trim()); } catch (e) { showToast('error', 'Error', 'Save dialog error.'); } }
function exportRawJson() { try { const raw = editor.export(); if (!raw?.drawflow) throw new Error("Export failed."); const json = JSON.stringify(raw, null, 2); Swal.fire({ title: 'Raw Drawflow JSON', width: '80%', html: `<textarea readonly style="width: 95%; height: 400px; white-space: pre; overflow-wrap: normal; overflow-x: auto; background-color:#f7dada; border:1px solid #ddd; font-family:monospace; font-size:12px;">${escapeHtml(json)}</textarea>`, confirmButtonText: 'Close' }); } catch (e) { showToast('error', 'Export Error', `Error: ${e.message}`); } }
function clearCurrentModule() { if (!editor) return; const mod = editor.module; const count = Object.keys(editor.export()?.drawflow?.[mod]?.data ?? {}).length; if (count === 0) { showToast('info', 'Empty', `Module "${escapeHtml(mod)}" empty.`); return; } try { Swal.fire({ title: `Clear Module "${escapeHtml(mod)}"?`, text: `Delete ${count} nodes/connections? Irreversible!`, icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', cancelButtonColor: '#3085d6', confirmButtonText: 'Yes, clear', cancelButtonText: 'Cancel' }).then((res) => { if (res.isConfirmed) { cleanupAllModuleIntervals(); editor.clearModuleSelected(); selectedNodeId = null; copiedNodeData = null; updateUIDisabledStates(); closeCodeEditorSidebar(false); if (mod === 'Home') addWelcomeNode(mod); saveHistoryState(true); showToast('info', 'Cleared', `Module "${escapeHtml(mod)}" cleared.`); } }); } catch (e) { showToast('error', 'Error', 'Failed to clear.'); } }

// --- Node Actions ---
function duplicateSelectedNode() { if (!selectedNodeId || editor.editor_mode === 'fixed') return; try { const oNode = editor.getNodeFromId(selectedNodeId); if (!oNode) throw new Error("Node not found."); const cData = JSON.parse(JSON.stringify(oNode.data || {})); const ins = Object.keys(oNode.inputs || {}).length, outs = Object.keys(oNode.outputs || {}).length; const x = oNode.pos_x + 40, y = oNode.pos_y + 40; const newId = editor.addNode(oNode.name, ins, outs, x, y, oNode.class, cData, oNode.html); saveHistoryState(); activateNodeIfNeeded(newId); } catch (err) { showToast('error', 'Duplicate Error', `Error: ${err.message}`); } }
function copySelectedNode() { if (!selectedNodeId) return; try { const node = editor.getNodeFromId(selectedNodeId); if (!node) throw new Error("Node not found."); if (!customNodeTypes[node.name]) throw new Error(`Type "${node.name}" unknown.`); copiedNodeData = { name: node.name, data: JSON.parse(JSON.stringify(node.data || {})), html: node.html, class: node.class, inputs: Object.keys(node.inputs || {}).length, outputs: Object.keys(node.outputs || {}).length, title: node.title || node.name }; updateUIDisabledStates(); showToast('success', 'Node Copied', `${copiedNodeData.title}`); } catch (err) { console.error("Error copying:", err); copiedNodeData = null; updateUIDisabledStates(); showToast('error', 'Copy Error', `Error: ${err.message}`); } }
function pasteNode() { if (!copiedNodeData || editor.editor_mode === 'fixed') return; if (!customNodeTypes[copiedNodeData.name]) { showToast('error', 'Paste Error', `Type "${copiedNodeData.name}" unknown.`); copiedNodeData = null; updateUIDisabledStates(); return; } try { const rect = editor.container.getBoundingClientRect(), zoom = editor.zoom || 1; const cx = (rect.width / 2 - editor.canvas_x) / zoom, cy = (rect.height / 2 - editor.canvas_y) / zoom; const ox = Math.random() * 40 - 20, oy = Math.random() * 40 - 20; const w = 200, h = 100; const x = cx - (w / 2) + ox, y = cy + oy; const cData = JSON.parse(JSON.stringify(copiedNodeData.data)); const newId = editor.addNode(copiedNodeData.name, copiedNodeData.inputs, copiedNodeData.outputs, x, y, copiedNodeData.class, cData, copiedNodeData.html); saveHistoryState(); activateNodeIfNeeded(newId); } catch (err) { showToast('error', 'Paste Error', `Error: ${err.message}`); } }
function deleteSelectedNode() { if (!selectedNodeId || editor.editor_mode === 'fixed') return; try { editor.removeNodeId(`node-${selectedNodeId}`); } catch (err) { showToast('error', 'Delete Error', `Error: ${err.message}`); } }

// --- Module/Tab Management ---
function renderModuleTabs() { /* Sin cambios */
    if (!moduleListElement) return;
    try {
        moduleListElement.innerHTML = '';
        const modulesData = editor.export().drawflow || {};
        const currentModule = editor.module;
        let moduleNames = Object.keys(modulesData);
        if (moduleNames.length === 0) {
             if (!modulesData['Home']) { editor.addModule('Home'); moduleNames = ['Home']; }
             else { moduleNames = ['Home']; }
        }
        moduleNames.sort((a, b) => (a === 'Home' ? -1 : b === 'Home' ? 1 : a.localeCompare(b)));

        moduleNames.forEach(moduleName => {
            const li = document.createElement('li');
            li.textContent = moduleName;
            li.dataset.moduleName = moduleName;
            li.title = `Cambiar a: ${moduleName}`;
            // ----------- AQUI SE CAMBIA -----------
            li.onclick = () => {
                editor.changeModule(moduleName);
                // Si quieres que las pestañas se vuelvan a renderizar inmediatamente:
                renderModuleTabs();
            };
            // ---------------------------------------
        
            if (moduleName === currentModule) li.classList.add('selected');
        
            if (moduleName !== 'Home' && moduleNames.length > 1) {
                const closeBtn = document.createElement('span');
                closeBtn.innerHTML = '×';
                closeBtn.title = `Eliminar ${moduleName}`;
                closeBtn.className = 'close-tab-btn';
                closeBtn.style.cssText = `
                    margin-left: 8px;
                    cursor: pointer;
                    color: #aaa;
                    font-weight: bold;
                    padding: 0 4px;
                    border-radius: 3px;
                    font-size: 14px;
                    line-height: 1;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    height: 16px;
                    width: 16px;
                    vertical-align: middle;
                    transition: all 0.2s;
                `;
                closeBtn.onmouseover = () => {
                    closeBtn.style.color = '#fff';
                    closeBtn.style.backgroundColor = '#ffb3b3';
                };
                closeBtn.onmouseout = () => {
                    closeBtn.style.color = '#aaa';
                    closeBtn.style.backgroundColor = 'transparent';
                };
                closeBtn.onclick = (ev) => {
                    ev.stopPropagation();
                    removeModuleTab(moduleName);
                };
                li.appendChild(closeBtn);
            }
        
            moduleListElement.appendChild(li);
        });
        

        const addBtn = document.createElement('li'); addBtn.innerHTML = '<i class="fas fa-plus"></i>';
        addBtn.title = "Añadir módulo"; addBtn.className = 'add-tab-btn';
        addBtn.style.cssText = `cursor: pointer; border-right: none; padding: 0 10px; background-color: transparent; margin-left: 5px; opacity: 0.7; transition: opacity 0.2s;`;
        addBtn.onmouseover = () => { addBtn.style.opacity = '1'; }; addBtn.onmouseout = () => { addBtn.style.opacity = '0.7'; };
        addBtn.onclick = promptAddModule;
        moduleListElement.appendChild(addBtn);
    } catch (e) { console.error("Error en renderModuleTabs:", e); }
}

async function promptAddModule() { /* Sin cambios */
    try {
        const { value: moduleNameInput } = await Swal.fire({
             title: 'Nuevo Módulo', input: 'text', inputLabel: 'Nombre', inputValue: '',
             showCancelButton: true, confirmButtonText: 'Crear', cancelButtonText: 'Cancelar',
             inputValidator: (v) => {
                const t = v?.trim(); if (!t) return 'Nombre vacío.';
                const existing = Object.keys(editor.export().drawflow || {});
                if (existing.some(m => m.toLowerCase() === t.toLowerCase())) return `"${t}" ya existe.`;
                if (/[<>:"/\\|?*]/.test(t)) return 'Caracteres inválidos.';
                return null;
             }
        });
        const moduleName = moduleNameInput?.trim();
        if (moduleName) {
            console.log(`Añadiendo módulo: ${moduleName}`);
            editor.addModule(moduleName);
            editor.changeModule(moduleName); // Dispara 'moduleChanged'
            renderModuleTabs(); // 'moduleChanged' debería llamarlo
            addWelcomeNode(moduleName); // Añadir nodo bienvenida al nuevo módulo
        } else { console.log("Creación cancelada."); }
    } catch (e) { console.error("Error en promptAddModule:", e); }
}
function removeModuleTab(moduleName) { /* Adaptado para limpiar intervalos */
    if (moduleName === 'Home') { Swal.fire('No permitido', 'No puedes eliminar "Home".', 'warning'); return; }
    const moduleCount = Object.keys(editor.export().drawflow || {}).length;
    if (moduleCount <= 1) { Swal.fire('No permitido', 'No puedes eliminar el último módulo.', 'warning'); return; }

    try {
        Swal.fire({
            title: `¿Eliminar Módulo "${moduleName}"?`, text: "Acción permanente.", icon: 'warning',
            showCancelButton: true, confirmButtonColor: '#d33', cancelButtonColor: '#3085d6',
            confirmButtonText: 'Sí, eliminar', cancelButtonText: 'Cancelar'
         }).then((result) => {
            if (result.isConfirmed) {
                console.log(`Eliminando módulo: ${moduleName}`);
                const currentActiveModule = editor.module;

                // Limpiar intervalos ANTES de cambiar de módulo si es el activo
                if (currentActiveModule === moduleName) {
                     cleanupAllModuleIntervals();
                }

                try {
                     editor.removeModule(moduleName);
                     console.log(`Módulo "${moduleName}" eliminado.`);
                     if (currentActiveModule === moduleName) {
                         console.log("Cambiando a 'Home' tras eliminar activo.");
                         editor.changeModule('Home'); // Dispara 'moduleChanged'
                     } else {
                         console.log("Módulo inactivo eliminado. Renderizando pestañas.");
                         renderModuleTabs(); // Re-renderizar manualmente
                         saveHistoryState(true); // Guardar estado tras eliminar inactivo
                     }
                 } catch (removeError) { console.error(`Error eliminando módulo:`, removeError); Swal.fire('Error', `No se pudo eliminar: ${removeError.message}`, 'error'); }
            } else { console.log("Eliminación cancelada."); }
        });
    } catch (e) { console.error("Error confirmación eliminar:", e); }
}


// --- UI Helpers ---
function changeMode(option) { try { if (!lockButton || !unlockButton || !editor) return; const isLocking = option === 'lock'; editor.editor_mode = isLocking ? 'fixed' : 'edit'; lockButton.style.display = isLocking ? 'none' : ''; unlockButton.style.display = isLocking ? '' : 'none'; const swEl = lockButton.parentElement; if(swEl) swEl.setAttribute('aria-checked', String(isLocking)); drawflowElement?.classList.toggle('drawflow-locked', isLocking); drawflowElement?.classList.toggle('drawflow-unlocked', !isLocking); showToast('info', `Editor ${isLocking ? 'Locked' : 'Unlocked'}`, '', 1500); updateUIDisabledStates(); if (isLocking) closeCodeEditorSidebar(false); } catch (e) { console.error("Error changeMode:", e); } }
function updateUIDisabledStates() { const isLocked = editor?.editor_mode === 'fixed'; const nodeSel = selectedNodeId !== null; const canUndo = historyIndex > 0; const canRedo = historyIndex < historyStack.length - 1; const canPaste = copiedNodeData !== null; const setCtrl = (btn, vis, dis = false) => { if (btn) { btn.classList.toggle('hidden', !vis); btn.disabled = !vis || dis; } }; setCtrl(undoButton, !isLocked && canUndo); setCtrl(redoButton, !isLocked && canRedo); setCtrl(copyButton, !isLocked && nodeSel); setCtrl(duplicateButton, !isLocked && nodeSel); setCtrl(pasteButton, !isLocked && canPaste); if (recalculateButton) setCtrl(recalculateButton, !isLocked); if (lockButton && unlockButton) { lockButton.style.display = isLocked ? 'none' : ''; unlockButton.style.display = isLocked ? '' : 'none'; const sw = lockButton.parentElement; if(sw) sw.setAttribute('aria-checked', String(isLocked)); } if (nodesListContainer) { nodesListContainer.style.opacity = isLocked ? '0.6' : '1'; nodesListContainer.style.pointerEvents = isLocked ? 'none' : ''; } updateNodePositionStatus(selectedNodeId); }

// --- Drag and Drop ---
var mobile_item_selec = ''; var mobile_last_move = null; function allowDrop(ev) { ev.preventDefault(); } function drag(ev) { try { const el = ev.target.closest(".drag-drawflow"); if (!el) { ev.preventDefault(); return;} const nt = el.dataset.node; if (!nt) { ev.preventDefault(); return;} if (ev.type === "touchstart") { mobile_item_selec = nt; mobile_last_move = ev; el.style.opacity = '0.5';} else { ev.dataTransfer.setData("node", nt); ev.dataTransfer.effectAllowed = 'copy';} } catch(e){console.error("Drag error:",e);} } function positionMobile(ev) { mobile_last_move = ev; } function drop(ev) { let nodeName='',clientX=0,clientY=0,isTouch=false; try { if (ev.type === "touchend") { isTouch=true; const orig=nodesListContainer?.querySelector(`[data-node="${mobile_item_selec}"]`); if(orig) orig.style.opacity='1'; if(!mobile_last_move||!mobile_item_selec) return; clientX=mobile_last_move.changedTouches[0].clientX; clientY=mobile_last_move.changedTouches[0].clientY; nodeName=mobile_item_selec; mobile_item_selec=''; mobile_last_move=null; } else { ev.preventDefault(); nodeName=ev.dataTransfer.getData("node"); clientX=ev.clientX; clientY=ev.clientY; } const targetEl = isTouch ? document.elementFromPoint(clientX, clientY) : ev.target; if (nodeName && targetEl?.closest(`#${DRAWFLOW_CONTAINER_ID}`)) addNodeToDrawFlow(nodeName, clientX, clientY); } catch(e){console.error("Drop error:",e); if(isTouch){const orig=nodesListContainer?.querySelector(`[data-node="${mobile_item_selec}"]`); if(orig) orig.style.opacity='1'; mobile_item_selec=''; mobile_last_move=null;}} }
function addNodeToDrawFlow(name, pos_x, pos_y) { if(!editor || editor.editor_mode==='fixed'){ showToast('warning', 'Locked'); return false; } try { const nodeDef=customNodeTypes[name]; if(!nodeDef) throw new Error(`Type "${name}" unknown.`); const rect=editor.container.getBoundingClientRect(), zoom=editor.zoom||1; const canvasX=(pos_x-rect.left-editor.canvas_x)/zoom, canvasY=(pos_y-rect.top-editor.canvas_y)/zoom; const w=parseInt(nodeDef.width||220), h=parseInt(nodeDef.height||80); const adjX=canvasX-(w/2), adjY=canvasY-(h/2); const data=JSON.parse(JSON.stringify(nodeDef.data||{})); const nodeId=editor.addNode(name, nodeDef.inputs, nodeDef.outputs, adjX, adjY, nodeDef.cssClass||'', data, nodeDef.html); saveHistoryState(); activateNodeIfNeeded(nodeId); return true; } catch(e){console.error(`Err adding ${name}:`,e); showToast('error', 'Add Node Error', `Error: ${e.message}`); return false;} }

// --- Recalculate All ---
function recalculateAllNodesInCurrentModule() { if (!editor || editor.editor_mode === 'fixed') { showToast('warning', 'Locked'); return; } const mod = editor.module; console.log(`%cRecalculating: ${mod}...`, 'color: orange;'); showToast('info', 'Recalculating...', `Module ${mod}.`, 2500); try { const nodes = editor.export()?.drawflow?.[mod]?.data ?? {}; const ids = Object.keys(nodes); if (ids.length === 0) return; cleanupAllModuleIntervals(); ids.forEach(id => { activateNodeIfNeeded(id); }); ids.forEach(id => { if (nodes[id]?.name === 'concatenar') updateConcatenateNode(id); }); showToast('success', 'Recalculated', `${mod} updated.`); } catch (err) { showToast('error', 'Error', 'Recalculation failed.'); } }

// --- CodeMirror Sidebar ---
function initializeCodeMirror() { if (codeMirrorEditor || !codeMirrorElement || typeof CodeMirror === 'undefined') return; try { codeMirrorContainer = codeMirrorElement; codeMirrorEditor = CodeMirror(codeMirrorContainer, { lineNumbers: true, mode: "javascript", theme: "material-darker", matchBrackets: true, autoCloseBrackets: true, indentUnit: 2, tabSize: 2, lineWrapping: true, gutters: ["CodeMirror-linenumbers"] }); if (codeEditorSaveButton) codeEditorSaveButton.addEventListener('click', saveAndCloseCodeEditor); if (codeEditorCloseButton) codeEditorCloseButton.addEventListener('click', () => closeCodeEditorSidebar(true)); console.log("CodeMirror initialized."); } catch (e) { console.error("Error initializing CodeMirror:", e); codeMirrorEditor = null; showToast('error', 'CodeMirror Error', 'Failed init.'); } }
function openCodeEditorSidebar(nodeId) { if (!codeEditorSidebar || !nodeId) return; if (!codeMirrorEditor) initializeCodeMirror(); if (!codeMirrorEditor) return; const node = editor.getNodeFromId(nodeId); const types = ['javascript_code', 'static_code_snippet', 'texto']; if (!node || !types.includes(node.name)) { if (codeEditorSidebar.classList.contains('visible')) closeCodeEditorSidebar(true); return; } if (currentlyEditingNodeId && currentlyEditingNodeId !== nodeId && codeEditorSidebar.classList.contains('visible')) closeCodeEditorSidebar(true); let df = '', icon = '', title = '', mode = 'text/plain'; switch (node.name) { case 'javascript_code': df='jscode'; icon='fab fa-js-square'; title='Edit JS Code'; mode='javascript'; break; case 'static_code_snippet': df='codecontent'; icon='fas fa-code'; title='Edit Static Code'; mode='text/plain'; break; case 'texto': df='content'; icon='fas fa-paragraph'; title='Edit Text / HTML'; mode='text/html'; break; } const code = node.data[df] || ''; const cmMode = codeMirrorEditor.getOption('mode'); if (cmMode !== mode) codeMirrorEditor.setOption('mode', mode); if (codeMirrorEditor.getValue() !== code) { codeMirrorEditor.setValue(code); codeMirrorEditor.clearHistory(); } if (codeEditorTitleSpan) codeEditorTitleSpan.textContent = title; const titleIcon = codeEditorSidebar.querySelector('.sidebar-header h3 i'); if (titleIcon) titleIcon.className = icon; if (editingNodeIdSpan) editingNodeIdSpan.textContent = nodeId; currentlyEditingNodeId = nodeId; if (!codeEditorSidebar.classList.contains('visible')) { codeEditorSidebar.classList.add('visible'); codeEditorSidebar.setAttribute('aria-hidden', 'false'); setTimeout(() => { codeMirrorEditor.refresh(); codeMirrorEditor.focus(); codeMirrorEditor.setCursor({ line: 0, ch: 0 }); }, 50); } else codeMirrorEditor.focus(); }
function closeCodeEditorSidebar(save = false) { if (!codeEditorSidebar || !codeEditorSidebar.classList.contains('visible')) { if(currentlyEditingNodeId) currentlyEditingNodeId = null; return; } const closingId = currentlyEditingNodeId; if (save && closingId && codeMirrorEditor) { const code = codeMirrorEditor.getValue(); const node = editor.getNodeFromId(closingId); if (node) { const name = node.name; let df = ''; switch (name) { case 'javascript_code': df = 'jscode'; break; case 'static_code_snippet': df = 'codecontent'; break; case 'texto': df = 'content'; break; } if (df && node.data[df] !== code) { editor.updateNodeDataFromId(closingId, { [df]: code }); const el = document.getElementById(`node-${closingId}`); const ta = el?.querySelector(`textarea[df-${df}]`); if (ta) ta.value = code; if (name === 'texto' || name === 'static_code_snippet') propagateData(closingId, name, df, code); saveHistoryState(); } } } codeEditorSidebar.classList.remove('visible'); codeEditorSidebar.setAttribute('aria-hidden', 'true'); currentlyEditingNodeId = null; if (editingNodeIdSpan) editingNodeIdSpan.textContent = 'N/A'; }
function saveAndCloseCodeEditor() { closeCodeEditorSidebar(true); }

// --- Status Bar ---
function updateZoomStatus(level) { if (zoomLevelSpan) zoomLevelSpan.textContent = `${Math.round(level * 100)}%`; }
function updateNodePositionStatus(nodeId) { if (nodePositionSpan) { if (nodeId) { const n = editor.getNodeFromId(nodeId); if (n) nodePositionSpan.textContent = `X:${Math.round(n.pos_x)},Y:${Math.round(n.pos_y)}`; else nodePositionSpan.textContent = `X:-,Y:-`; } else nodePositionSpan.textContent = `X:-,Y:-`; } }

// --- Drawflow Event Listeners ---
try {
    editor.on('nodeRemoved', (id) => { console.log(`Event: Node Removed ${id}`); cleanupNodeIntervals(id); if (selectedNodeId === id) { selectedNodeId = null; updateNodePositionStatus(null); } if (currentlyEditingNodeId === id) closeCodeEditorSidebar(false); updateUIDisabledStates(); saveHistoryState(); });
    editor.on('nodeSelected', (id) => { console.log(`Event: Node Selected ${id}`); selectedNodeId = id; updateUIDisabledStates(); updateNodePositionStatus(id); const n = editor.getNodeFromId(id); const editTypes = ['javascript_code', 'static_code_snippet', 'texto']; if (n && editTypes.includes(n.name)) { if (!codeMirrorEditor) initializeCodeMirror(); if (codeMirrorEditor) openCodeEditorSidebar(id); } else closeCodeEditorSidebar(true); });
    editor.on('nodeUnselected', (wasSel) => { console.log(`Event: Node Unselected (was: ${wasSel})`); if (selectedNodeId === currentlyEditingNodeId) closeCodeEditorSidebar(true); selectedNodeId = null; updateUIDisabledStates(); updateNodePositionStatus(null); });
    editor.on('nodeMoved', (id) => { saveHistoryState(); if(id === selectedNodeId) updateNodePositionStatus(id); const n = editor.getNodeFromId(id); if(n){ const outs=getConnections(id,'output'); outs.forEach(c=>{if(editor.getNodeFromId(c.node)?.name==='concatenar')updateConcatenateNode(c.node);}); if(n.name==='concatenar'){const ins=getConnections(id,'input');ins.forEach(c=>{updateConcatenateNode(id);});}}});
    editor.on('connectionCreated', (c) => { console.log('Event: Conn Created', c); setTimeout(() => { try { const sId=c.output_id, tId=c.input_id, sN=editor.getNodeFromId(sId), tN=editor.getNodeFromId(tId); if(!sN||!tN) throw new Error("Src/Tgt node missing."); const tName=tN.name, tPort=c.input_class, ignore=['texto','static_code_snippet']; if(ignore.includes(tName)){saveHistoryState();return;} let data; const sD=sN.data; if(sD){const keys=['result','content','codecontent','outputhtml','filecontent','display','url','jscode'];for(const k of keys){if(sD.hasOwnProperty(k)){data=sD[k];break;}} if(data===undefined&&Object.keys(sD).length>0){const fk=Object.keys(sD)[0];if(!['lastInput','selector_received'].includes(fk))data=sD[fk];}} if(EXECUTE_NODE_SYSTEM_TYPES.includes(tName)){if(tName==='extract_value'){if(tPort==='input_1')executeNode(tId,data);else if(tPort==='input_2'){const s=String(data??'');editor.updateNodeDataFromId(tId,{selector_received:s});const el=document.getElementById(`node-${tId}`);const i=el?.querySelector('input[df-selector_received]');if(i)i.value=s;}}else executeNode(tId,data);}else if(tName==='javascript_code')editor.updateNodeDataFromId(tId,{lastInput:data});else if(tName==='concatenar')updateConcatenateNode(tId);else if(tName==='mostrarPasar'){if(tPort==='input_1'){const v=String(data??'');editor.updateNodeDataFromId(tId,{result:v});const el=document.getElementById(`node-${tId}`);const ta=el?.querySelector('textarea[df-result]');if(ta)ta.value=v;propagateData(tId,tName,'result',data);}}else if(tName==='guardarTexto'){if(tPort==='input_1'){const v=String(data??'');editor.updateNodeDataFromId(tId,{savecontent:v});const el=document.getElementById(`node-${tId}`);const ta=el?.querySelector('textarea[df-savecontent]');if(ta)ta.value=v;}} saveHistoryState();}catch(err){console.error("Err connectionCreated:",err);saveHistoryState();}},0);});
    editor.on('connectionRemoved', (c) => { console.log('Event: Conn Removed', c); const tId = c.input_id, tN = editor.getNodeFromId(tId); if (tN?.name === 'concatenar') setTimeout(() => updateConcatenateNode(tId), 0); saveHistoryState(); });
    editor.on('moduleChanged', (name) => { console.log(`%cEVENT: Module Changed -> ${name}`, 'color: blue; font-weight: bold;'); renderModuleTabs(); initializeHistory(); selectedNodeId = null; copiedNodeData = null; currentlyEditingNodeId = null; updateUIDisabledStates(); updateZoomStatus(editor.zoom); updateNodePositionStatus(null); document.title = `Xocoflow | ${currentProjectName} - ${name}`; closeCodeEditorSidebar(false); setTimeout(() => { saveHistoryState(true); activateExistingAutoNodes(); console.log(` -> Module ${name} loaded.`); }, 50); });
    editor.on('zoom', (level) => { updateZoomStatus(level); });
    editor.on('translate', (pos) => { /* Log canvas position if needed */ });
    editor.on('contextmenu', (e) => { e.preventDefault(); });
    editor.on('click', (e) => { if (codeEditorSidebar?.classList.contains('visible') && !e.target.closest('#code-editor-sidebar')) { const nodeEl = currentlyEditingNodeId ? document.getElementById(`node-${currentlyEditingNodeId}`) : null; if (!nodeEl || !nodeEl.contains(e.target)) closeCodeEditorSidebar(true); } if (!e.target.closest('.drawflow-node,.controls-container,.menu,.swal2-container,#code-editor-sidebar')) { if (selectedNodeId) editor.deselectNode(selectedNodeId); } });
} catch (e) { console.error("Error setting Drawflow listeners:", e); showToast('error', 'Critical Error', 'Failed editor events.'); }

// --- Keyboard Shortcuts ---
document.addEventListener('keydown', (event) => { try { const active = document.activeElement; const isInput = active && (active.tagName === 'INPUT' || active.tagName === 'TEXTAREA' || active.isContentEditable); const isModal = nodeDefinitionModal?.style.display !== 'none'; const isCM = codeMirrorEditor && codeMirrorEditor.hasFocus(); const isSidebar = codeEditorSidebar?.contains(active); if (event.key === 'Escape') { if (isModal) { closeNodeDefinitionModal(); event.preventDefault(); return; } if (isCM || (isSidebar && currentlyEditingNodeId)) { closeCodeEditorSidebar(true); event.preventDefault(); return; } if (selectedNodeId) { editor.deselectNode(selectedNodeId); event.preventDefault(); return; } } if (isInput && !isCM && !isSidebar) { if ((event.ctrlKey || event.metaKey) && ['a','c','x','v','z','y'].includes(event.key.toLowerCase())) return; if (!['Escape','Delete','Backspace'].includes(event.key)) return; } const ctrl = event.ctrlKey || event.metaKey; if (ctrl) { switch (event.key.toLowerCase()) { case 'z': event.preventDefault(); undo(); break; case 'y': event.preventDefault(); redo(); break; case 'c': if(selectedNodeId){event.preventDefault(); copySelectedNode();} break; case 'v': event.preventDefault(); pasteNode(); break; case 'd': if(selectedNodeId){event.preventDefault(); duplicateSelectedNode();} break; case 's': event.preventDefault(); if (event.shiftKey) promptSaveAs(); else saveProject(currentProjectName); break; case 'o': event.preventDefault(); triggerLoad(); break; case 'r': if(recalculateButton){event.preventDefault(); recalculateAllNodesInCurrentModule();} break; } } else { switch (event.key) { case 'Delete': case 'Backspace': if (selectedNodeId && !isInput && !isCM && !isSidebar) { event.preventDefault(); deleteSelectedNode(); } break; } } } catch (e) { console.error("Keyboard shortcut error:", e); } });

// --- Application Initialization ---
function initializeApp() { try { console.log("🚀 Initializing Xocoflow..."); showToast('info', 'Initializing...', '', 1500); editor.start(); console.log("Drawflow started."); const initialExport = editor.export(); const initialModules = initialExport?.drawflow; let homeExists = initialModules?.hasOwnProperty('Home'); if (!initialModules || Object.keys(initialModules).length === 0 || !homeExists) { if (!homeExists) editor.addModule('Home'); if (editor.module !== 'Home') editor.changeModule('Home'); } else if (!editor.module || !initialModules[editor.module]) editor.changeModule('Home'); console.log(`Initial active module: ${editor.module}`); loadCustomNodesToSidebar(); renderModuleTabs(); initializeHistory(); updateUIDisabledStates(); updateZoomStatus(editor.zoom); updateNodePositionStatus(null); document.title = `Xocoflow | ${currentProjectName} - ${editor.module}`; changeMode('edit'); const currentModuleData = editor.export()?.drawflow?.[editor.module]?.data ?? {}; if (Object.keys(currentModuleData).length === 0) { addWelcomeNode(editor.module); saveHistoryState(true); } else { saveHistoryState(true); activateExistingAutoNodes(); } if (recalculateButton) recalculateButton.addEventListener('click', recalculateAllNodesInCurrentModule); initializeCodeMirror(); console.log("%cXocoflow Ready.", "color: green; font-weight: bold;"); showToast('success', 'Ready', '', 1500); } catch (error) { console.error("❌ FATAL INITIALIZATION ERROR:", error); document.body.innerHTML = `<div style="padding: 20px; background-color: #ffcdd2; border: 2px solidrgb(197, 119, 119); color:rgb(180, 113, 113); font-family: sans-serif; text-align: center;"><h1><i class="fas fa-bomb"></i> Critical Error</h1><p>Xocoflow failed to initialize. Check console (F12).</p><pre style="text-align: left; white-space: pre-wrap; word-wrap: break-word; background-color: #ffb3b3; padding: 10px; border: 1px solid #ccc; margin-top: 15px; max-height: 300px; overflow-y: auto;">${escapeHtml(error.stack || String(error))}</pre><p style="margin-top:15px;"><button onclick="location.reload()">Reload</button></p></div>`; throw error; } }
function addWelcomeNode(moduleName) { if (!editor || !moduleName || editor.editor_mode === 'fixed') return; try { const exported = editor.export(); const existingData = exported?.drawflow?.[moduleName]?.data ?? {}; if (Object.keys(existingData).length > 0) return; const htmlContent = `<div><div class="title-box" style="background-color:#4CAF50;color:white; border-bottom: 1px solid #388E3C;"><i class="fas fa-rocket"></i> Welcome to ${escapeHtml(moduleName)}!</div><div class="box"><p><strong>Quick Start:</strong></p><ul style="margin-top:5px;padding-left:20px; margin-bottom: 0; list-style: none;"><li><i class="fas fa-mouse-pointer" style="width:15px; color:#007bff;"></i> Drag nodes.</li><li><i class="fas fa-link" style="width:15px; color:#ff9800;"></i> Connect outputs <i class="fas fa-arrow-right"></i> to inputs <i class="fas fa-arrow-left"></i>.</li><li><i class="fas fa-edit" style="width:15px; color:#9c27b0;"></i> Click "Edit Content/Code".</li><li><i class="fas fa-save" style="width:15px; color:#4CAF50;"></i> Save often.</li><li><i class="fas fa-plus-circle" style="width:15px; color:#1a73e8;"></i> Explore "Create Node Type".</li></ul></div></div>`; const nodeWidth = 280; const nodeHeight = 210; const rect = editor.container.getBoundingClientRect(); const zoom = editor.zoom || 1; const cx = (rect.width / 2 - editor.canvas_x) / zoom; const cy = (rect.height / 2 - editor.canvas_y) / zoom; const posX = cx - nodeWidth / 2; const posY = cy - nodeHeight / 2; const name = 'xocoflow_welcome_info'; if (!customNodeTypes[name]) editor.registerNode(name, null , {}, {}); const id = editor.addNode(name, 0, 0, posX, posY, 'welcome-node', {}, htmlContent); console.log(`Welcome node ${id} added to ${moduleName}.`); } catch (e) { console.error(`Error adding welcome node:`, e); } }

// --- Initial Execution Trigger ---
if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', initializeApp); }
else { initializeApp(); }

// === END OF COMPLETE xocoflow_logic.js ===